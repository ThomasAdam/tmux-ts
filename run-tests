#!/bin/bash
#
# Copyright (c) 2015, Thomas Adam <thomas@xteddy.org>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
# OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -euo pipefail

# Environment variables
# XXX: Use mktemp(1)
export TMUX_TMPDIR=${TMPDIR:-/tmp}/tmux-ut
export TMUX_SOCK_NAME="special-tmux-ut"
export TMUX_CMD="$(which tmux)"
export TMUX_BINARY="$TMUX_CMD -L$TMUX_SOCK_NAME -f/dev/null"
export TMUX_TEST_SESSION="test-session"

# ts(1) environment variables (no command-line option to ts(1) for these)
export TS_DIFF="diff -u"

. test_helper

attach_for_tests=0
destroy_server=0
ts_debug=""

# update_tmux_cmd() - Updates the tmux command to use.
update_tmux_cmd()
{
	[ -x "$1" ] || die "Cannot find: <<$1>>"
	TMUX_CMD="$1"
	TMUX_BINARY="$TMUX_CMD -L$TMUX_SOCK_NAME -f/dev/null"
}

while getopts ":andt:" opt
do
	case "$opt" in
		a)
			attach_for_tests=1
		;;
		n)
			destroy_server=1
		;;
		t)
			update_tmux_cmd "$OPTARG"
		;;
		d)
			ts_debug='-d'
		;;
		:)
			die "Option -$OPTARG needs an argument"
		;;
	esac
done

shift $(($OPTIND - 1))

ts() {

	[ "$attach_for_tests" -eq 1 ] && {
		[ -n "$DISPLAY" ] && [ -x "$(type -p xterm)" ] && {
			# Only run xterm if the previous window isn't there.
			[ -n "$(xlsclients | grep -i tmux-test)" ] || {
				xterm -title tmux-test -hold -fg white -bg black -fn 8x13 \
					-e "$PWD/wait-for-tmux" &
			}
		}
	}

	command ts $ts_debug -r -c -s -m "$@"

	[ "$destroy_server" -eq 1 ] && {
		printf "Killing server... all done\n"
		tmux kill-server
	}
}

check_for_ts()
{
	[ -d "ts" ] && {
		(cd "ts" && git pull -q 2>/dev/null)
		return 0
	}

	git clone -q https://github.com/thinkerbot/ts.git ts
}

check_for_ts

export PATH=$(pwd)/ts/bin:$PATH
ts ./tests/*.sh
